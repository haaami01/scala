 [ ] generalize newTermName from `arrayChar` to CharSequence, use this from
     finishNamed and fullNameInternal to avoid intermediate strings, char arrays
 [ ] why does `Tree#symbol` show up so prominently in profiles? Can we route the common
     cases through a monomorphic call?
 [x] TailCalls takes 2%, half that time is in `failHere`, updating a hash map from Context => Position.
 [ ] @inline Transformer.atOwner, merge with SuperAccessors.atOwner
 [x] check inlining in Typers, etc.
       - important to benchmark after clean builds as inlining seems more reliable compiling from source
       - this might mean that we are missing inlining opportunities between scala-reflect / scala-compiler
         e.g. Type#orElse
 [x] We have a lot of inefficient convenience methods in Name/NameOps that convert Strings to names, e.g.
     `def startsWith(s: String) = startsWith(s: TermName)`. These are used by `isLocalDummyName`,
     `dropLocal`, `dropSetter`, `isLoopHeaderLabel`,
     [ ] do another sweep for residual inefficiencies
 [x] hoist needsFlatClasses checks in Scope creation
 [ ] the unique type internally uses .equals to find entries in the bucket; it could just use eq.
     0.4% potential saving

 [x] !!! Intermittent NPE:

        1966ms
        2119ms
        error: java.lang.NullPointerException
            at scala.reflect.internal.Types$$anonfun$45.apply(Types.scala:4590)
            at scala.reflect.internal.util.Collections$class.loop$1(Collections.scala:56)
            at scala.reflect.internal.util.Collections$class.mapList(Collections.scala:60)
            at scala.reflect.internal.SymbolTable.mapList(SymbolTable.scala:14)
            at scala.reflect.internal.Types$MethodType.paramTypes(Types.scala:2534)
            at scala.tools.nsc.transform.UnCurry$UnCurryTransformer.mainTransform(UnCurry.scala:468)
            at scala.tools.nsc.transform.UnCurry$UnCurryTransformer.transform(UnCurry.scala:93)

================
Implicit Search:     9%

Overload Resolution:  5%
   - 64% of which is inferring implicits to adapt arguments

================
