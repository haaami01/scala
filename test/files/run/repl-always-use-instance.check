
scala> case class Name(value: String) // show
object $read extends scala.AnyRef {
  def <init>() = {
    super.<init>;
    ()
  };
  object $iw extends scala.AnyRef {
    def <init>() = {
      super.<init>;
      ()
    };
    object $iw extends scala.AnyRef {
      def <init>() = {
        super.<init>;
        ()
      };
      case class Name extends scala.Product with scala.Serializable {
        <caseaccessor> <paramaccessor> val value: String = _;
        def <init>(value: String) = {
          super.<init>;
          ()
        }
      }
    }
  };
  val INSTANCE = this
}
defined class Name

scala> val x = Name("foo") // show
object $read extends scala.AnyRef {
  def <init>() = {
    super.<init>;
    ()
  };
  object $iw extends scala.AnyRef {
    def <init>() = {
      super.<init>;
      ()
    };
    import $line3.$read.INSTANCE.$iw.$iw.Name;
    import $line3.$read.INSTANCE.$iw.$iw.Name;
    object $iw extends scala.AnyRef {
      def <init>() = {
        super.<init>;
        ()
      };
      val x = Name("foo")
    }
  };
  val INSTANCE = this
}
x: Name = Name(foo)

scala> val y = Name("bar")
y: Name = Name(bar)

scala> val z = Name(x.value + y.value) // show
object $read extends scala.AnyRef {
  def <init>() = {
    super.<init>;
    ()
  };
  object $iw extends scala.AnyRef {
    def <init>() = {
      super.<init>;
      ()
    };
    import $line3.$read.INSTANCE.$iw.$iw.Name;
    import $line3.$read.INSTANCE.$iw.$iw.Name;
    import $line4.$read.INSTANCE.$iw.$iw.x;
    import $line5.$read.INSTANCE.$iw.$iw.y;
    object $iw extends scala.AnyRef {
      def <init>() = {
        super.<init>;
        ()
      };
      val z = Name(x.value.+(y.value))
    }
  };
  val INSTANCE = this
}
z: Name = Name(foobar)

scala> :quit
