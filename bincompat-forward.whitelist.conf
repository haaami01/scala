filter {
  packages = [
    "scala.reflect.internal"
    # "scala.concurrent.impl"
    # "scala.reflect.runtime"
  ]
  problems=[
    # Scala Virtualized
    {
      matchName="scala.EmbeddedControls$Scope"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.ProxyControlsBase"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.EmbeddedControls$Struct"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.Predef$"
      problemName=MissingTypesProblem
    },
    {
      matchName="scala.Predef.__equal"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__return"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__assign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__doWhile"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__ifThenElse"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__newVar"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__whileDo"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.ProxyControls"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.EmbeddedControls"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.ManifestFactory.refinedType"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.SourceLocation"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.ClassManifestFactory.refinedType"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.SourceContext"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.SourceLocation$"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.SourceLocation$ConcreteSourceLocation"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.SourceContext$"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.SourceContext$ConcreteSourceContext"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.RefinedManifest"
      problemName=MissingClassProblem
    }
    {
      matchName="scala.reflect.runtime.Settings.Yvirtualize"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.runtime.Settings.Yvirtualize"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_newVar"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControlsClass"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_return"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_doWhile"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_new"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_Scope"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.SourceContextModule"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_assign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.ProxyControlsClass"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.SourceLocationModule"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.SourceLocationClass"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.Symbol_result"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_ifThenElse"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_whileDo"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.SourceContextClass"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_Struct"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_equal"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.SymbolTable.LiftedAssign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Trees.LiftedAssign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TypeNames.Scope"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TypeNames.TransparentProxy"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TypeNames.Struct"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames.result"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._doWhile"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._ifThenElse"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._newVar"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._new"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._whileDo"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._return"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._forward"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._equal"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._assign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.settings.MutableSettings.Yvirtualize"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.unpickleClass"
      problemName=IncompatibleMethTypeProblem
    },
    {
      matchName="scala.reflect.runtime.SymbolLoaders#TopClassCompleter.this"
      problemName=IncompatibleMethTypeProblem
    },
    {
      matchName="scala.sys.process.ProcessImpl#CompoundProcess.futureValue"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.sys.process.ProcessImpl#CompoundProcess.futureThread"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.reflect.runtime.Settings.Yvirtpatmat"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.reflect.io.PlainNioFile"
      problemName=MissingClassProblem
    },
    # this one can be removed once there is a fix for
    # https://github.com/typesafehub/migration-manager/issues/147
    {
        matchName="scala.collection.Iterator#Leading#1.trailer"
        problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.util.hashing.MurmurHash3.wrappedBytesHash"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.util.hashing.MurmurHash3.wrappedArrayHash"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.reflect.runtime.SynchronizedOps.newMappedBaseTypeSeq"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.reflect.runtime.JavaUniverse.newMappedBaseTypeSeq"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.collection.immutable.HashMap.contains0"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.collection.immutable.HashMap#HashTrieMap.contains0"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.collection.immutable.HashMap#HashMap1.contains0"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.collection.immutable.HashMap#HashMapCollision1.contains0"
      problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.reflect.api.SerializedTypeTag.serialVersionUID"
        problemName=MissingFieldProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps$ofChar"
        problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofChar.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofChar.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps$ofShort"
        problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofShort.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofShort.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofByte.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofByte.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofBoolean.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofBoolean.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofChar.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofChar.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofDouble.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofDouble.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps$ofUnit"
        problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofUnit.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofUnit.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofInt.sliceImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofInt.emptyImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps$ofInt"
        problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofInt.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofInt.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofRef.sliceImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofRef.emptyImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofChar.sliceImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofChar.emptyImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofUnit.sliceImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofUnit.emptyImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps$ofBoolean"
        problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofBoolean.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofBoolean.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofShort.sliceImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofShort.emptyImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofShort.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofShort.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofRef.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofRef.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofUnit.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofUnit.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofByte.sliceImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofByte.emptyImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofDouble.sliceImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofDouble.emptyImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOpsImpl"
        problemName=MissingClassProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofInt.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofInt.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps$ofDouble"
        problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofDouble.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofDouble.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps$ofRef"
        problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofRef.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofRef.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofLong.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofLong.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps$ofByte"
        problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofByte.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofByte.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofFloat.sliceImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofFloat.emptyImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofLong.sliceImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofLong.emptyImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofBoolean.sliceImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofBoolean.emptyImpl$extension"
        problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.collection.mutable.WrappedArray$ofByte"
      problemName=MissingTypesProblem
    },
    {
      matchName="scala.collection.mutable.WrappedArray$ofBoolean"
      problemName=MissingTypesProblem
    },
    {
      matchName="scala.collection.mutable.WrappedArray$ofChar"
      problemName=MissingTypesProblem
    },
    {
      matchName="scala.collection.mutable.WrappedArray$ofDouble"
      problemName=MissingTypesProblem
    },
    {
      matchName="scala.collection.mutable.WrappedArray$ofShort"
      problemName=MissingTypesProblem
    },
    {
      matchName="scala.collection.mutable.WrappedArray$ofRef"
      problemName=MissingTypesProblem
    },
    {
      matchName="scala.collection.mutable.WrappedArray$ofUnit"
      problemName=MissingTypesProblem
    },
    {
      matchName="scala.collection.mutable.WrappedArray$ofInt"
      problemName=MissingTypesProblem
    },
    {
      matchName="scala.collection.mutable.WrappedArrayImpl"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.collection.mutable.WrappedArray$ofLong"
      problemName=MissingTypesProblem
    },
    {
      matchName="scala.collection.mutable.WrappedArray$ofFloat"
      problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofFloat.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.WrappedArray#ofFloat.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps$ofLong"
        problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofLong.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofLong.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps$ofFloat"
        problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofFloat.sliceImpl"
        problemName=DirectMissingMethodProblem
    },
    {
        matchName="scala.collection.mutable.ArrayOps#ofFloat.emptyImpl"
        problemName=DirectMissingMethodProblem
    },
    // introduce FilteredTraversableInternal
    {
        matchName="scala.collection.immutable.Nil$"
        problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.immutable.FilteredTraversableInternal"
        problemName=MissingClassProblem
    },
    {
        matchName="scala.collection.immutable.List"
        problemName=MissingTypesProblem
    },
    {
        matchName="scala.collection.immutable.$colon$colon"
        problemName=MissingTypesProblem
    },
    {
      matchName="scala.annotation.showAsInfix$"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.annotation.showAsInfix"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.util.PropertiesTrait.coloredOutputEnabled"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.util.Properties.coloredOutputEnabled"
      problemName=DirectMissingMethodProblem
    }
  ]
}
