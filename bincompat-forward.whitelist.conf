filter {
  packages = [
    "scala.reflect.internal"
    # "scala.concurrent.impl"
    # "scala.reflect.runtime"
  ]
  problems=[
    # Scala Virtualized
    {
      matchName="scala.EmbeddedControls$Scope"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.ProxyControlsBase"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.EmbeddedControls$Struct"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.Predef$"
      problemName=MissingTypesProblem
    },
    {
      matchName="scala.Predef.__equal"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__return"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__assign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__doWhile"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__ifThenElse"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__newVar"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.Predef.__whileDo"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.ProxyControls"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.EmbeddedControls"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.ManifestFactory.refinedType"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.SourceLocation"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.ClassManifestFactory.refinedType"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.SourceContext"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.SourceLocation$"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.SourceLocation$ConcreteSourceLocation"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.SourceContext$"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.SourceContext$ConcreteSourceContext"
      problemName=MissingClassProblem
    },
    {
      matchName="scala.reflect.RefinedManifest"
      problemName=MissingClassProblem
    }
    {
      matchName="scala.reflect.runtime.Settings.Yvirtualize"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.runtime.Settings.Yvirtualize"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_newVar"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControlsClass"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_return"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_doWhile"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_new"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_Scope"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.SourceContextModule"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_assign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.ProxyControlsClass"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.SourceLocationModule"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.SourceLocationClass"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.Symbol_result"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_ifThenElse"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_whileDo"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.SourceContextClass"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_Struct"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Definitions#DefinitionsClass.EmbeddedControls_equal"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.SymbolTable.LiftedAssign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.Trees.LiftedAssign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TypeNames.Scope"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TypeNames.TransparentProxy"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TypeNames.Struct"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames.result"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._doWhile"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._ifThenElse"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._newVar"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._new"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._whileDo"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._return"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._forward"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._equal"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.StdNames#TermNames._assign"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.internal.settings.MutableSettings.Yvirtualize"
      problemName=MissingMethodProblem
    },
    {
      matchName="scala.reflect.runtime.JavaMirrors#JavaMirror.unpickleClass"
      problemName=IncompatibleMethTypeProblem
    },
    {
      matchName="scala.reflect.runtime.SymbolLoaders#TopClassCompleter.this"
      problemName=IncompatibleMethTypeProblem
    },
    {
      matchName="scala.sys.process.ProcessImpl#CompoundProcess.futureValue"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.sys.process.ProcessImpl#CompoundProcess.futureThread"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.reflect.runtime.Settings.Yvirtpatmat"
      problemName=DirectMissingMethodProblem
    },
    {
      matchName="scala.reflect.io.PlainNioFile"
      problemName=MissingClassProblem
    },
    # this one can be removed once there is a fix for
    # https://github.com/typesafehub/migration-manager/issues/147
    {
        matchName="scala.collection.Iterator#Leading#1.trailer"
        problemName=DirectMissingMethodProblem
    }
  ]
}
